version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: idrac-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: idrac_orchestrator
      POSTGRES_USER: idrac_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_please_change}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - idrac_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U idrac_admin -d idrac_orchestrator"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Main Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: idrac-orchestrator
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://idrac_admin:${POSTGRES_PASSWORD:-secure_password_please_change}@postgres:5432/idrac_orchestrator
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SERVER_PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - firmware_storage:/opt/firmware
      - app_logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - idrac_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: idrac-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - idrac_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: idrac-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - idrac_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Log aggregator (optional)
  loki:
    image: grafana/loki:2.9.0
    container_name: idrac-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - idrac_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # Monitoring dashboard (optional)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: idrac-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - idrac_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  firmware_storage:
    driver: local
  app_logs:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  idrac_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Secrets (use Docker secrets in production)
secrets:
  postgres_password:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true